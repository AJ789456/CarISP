import Igis
import Scenes
import Foundation

class Obstacles: RenderableEntity {
    let cat: Image
    let granny: Image
    let cone: Image
    let hoes: Image
    var when = 1
    var count = 0
    var middleL = 0
    var leftL = 0
    var rightL = 0
    var yPos = 0
    var canvasEnd = 0
    var speed2 = 4
    var middle = 0
    var mRight = false
    var mLeft = false
    var moved = 0
    var index = 0
    var lefting = false
    var righting = false
    var list = [Int]()
    var carBoundingRect = Rect(topLeft: Point(x: 0, y: 0), size: Size(width: 0, height: 0))
    var catBoundingRect = Rect(topLeft: Point(x: 0, y: 0), size: Size(width: 0, height: 0))
    var coneBoundingRect = Rect(topLeft: Point(x: 0, y: 0), size: Size(width: 0, height: 0))
    var grannyBoundingRect = Rect(topLeft: Point(x: 0, y: 0), size: Size(width: 0, height: 0))
    let lines = Lines()
//    var stopper = false
    
    init() {
        guard let catURL = URL(string: "https://codermerlin.com/users/avanish-jeendru/cat.png") else {
            fatalError("Failed to create URL for cat")
        }
        cat = Image(sourceURL: catURL)

        guard let grannyURL = URL(string: "https://codermerlin.com/users/avanish-jeendru/granny.png") else {
            fatalError("Failed to create URL for granny")
        }
        granny = Image(sourceURL: grannyURL)

        guard let coneURL = URL(string: "https://codermerlin.com/users/avanish-jeendru/cone.png") else {
            fatalError("Failed to create URL for cone")
        }
        cone = Image(sourceURL: coneURL)

        guard let hoesURL = URL(string: "https://codermerlin.com/users/avanish-jeendru/hoes.png") else {
            fatalError("Failed to create URL for hoes")
        }
        hoes = Image(sourceURL: hoesURL)
        
        super.init(name: "Obstacles")
                
    }

    override func setup(canvasSize: Size, canvas: Canvas) {
        middleL = canvasSize.center.x
        leftL = canvasSize.center.x - 220
        rightL = canvasSize.center.x + 220
        canvasEnd = canvasSize.height 
        list = [middleL, leftL, rightL]
        middle = canvasSize.width / 2 - 83
        canvas.setup(cat, granny, cone, hoes)
    }
   
    override func render(canvas:Canvas) {
        if mLeft && moved < 22 && !(middle == (leftL-83)) && !righting {
            lefting = true
            middle -= 10
            moved += 1
        } else if middle == (rightL - 83) {
            mLeft = false
        }
        
        if moved == 22 && mLeft {
            moved = 0
            mLeft = false
            lefting = false
        }

        if mRight && moved < 22 && !(middle == (rightL - 83)) && !lefting{
            righting = true
            middle += 10
            moved += 1
        } else if middle == (rightL - 83) {
            mRight = false
        }

        if moved == 22 && mRight {
            moved = 0
            mRight = false
            righting = false
        }
        
        catBoundingRect = Rect(topLeft: Point(x: list[index] - 50, y: yPos-80), size: Size(width:100, height: 50))
        grannyBoundingRect = Rect(topLeft: Point(x: list[index]-75, y: yPos-125), size: Size(width:150, height: 110))
        coneBoundingRect = Rect(topLeft: Point(x: list[index]-50, y: yPos-60), size: Size(width:100, height: 40))
        carBoundingRect = Rect(topLeft: Point(x: middle, y: canvasEnd-280), size : Size(width: 166, height: 250))
        canvas.render(Rectangle(rect: carBoundingRect))

        if cat.isReady && when == 1 {
            cat.renderMode = .destinationRect(Rect(topLeft:Point(x:list[index]-50, y:yPos-100), size:Size(width: 100, height:100)))
            canvas.render(Rectangle(rect: catBoundingRect))
            canvas.render(cat)
        }
        
        if granny.isReady && when == 2 {
            granny.renderMode = .destinationRect(Rect(topLeft:Point(x:list[index]-70, y:yPos-150), size:Size(width: 150, height:150)))
            canvas.render(Rectangle(rect: grannyBoundingRect))
            canvas.render(granny)
            
        }
        
        if cone.isReady && when == 3 {
            cone.renderMode = .destinationRect(Rect(topLeft:Point(x:list[index]-50, y:yPos-100), size:Size(width: 100, height:100)))
            canvas.render(Rectangle(rect: coneBoundingRect))
            canvas.render(cone)
            
        }
        
        if hoes.isReady && when == 4 {
            hoes.renderMode = .destinationRect(Rect(topLeft:Point(x:list[index]-75, y:yPos-150), size:Size(width: 150, height:150)))
            canvas.render(hoes)
            
        }
    }
    override func calculate(canvasSize: Size) {
        let containmentCat = catBoundingRect.containment(target: carBoundingRect)
        let containmentGranny = grannyBoundingRect.containment(target: carBoundingRect)
        let containmentCone = coneBoundingRect.containment(target: carBoundingRect)
        
        

        if !containmentCat.intersection([.contact]).isEmpty && when == 1{
            lines.pause = true
            speed2 = 0
            print("this is in obstacoes \(lines.pause)")
            
        }
        
        

        if !containmentGranny.intersection([.contact]).isEmpty && when == 2{
//            speed2 = 0
//            lines.stopper()
        }

        

        if !containmentCone.intersection([.contact]).isEmpty && when == 3{
//            speed2 = 0
//            lines.stopper()
        }

        
        if yPos > (canvasEnd) {
            yPos = 0
            when = Int.random(in: 1 ... 4)
            index = Int.random(in: 0 ... 2)
        } else {
            yPos += speed2
        }
        if count % 200 == 0 && speed2 < 15 && !(speed2 == 0) {
            speed2 += 1
        }
        count += 1
    }
}

